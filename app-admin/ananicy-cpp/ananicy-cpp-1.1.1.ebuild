# Copyright 2023 Gentoo Authors
# Distributed under the terms of the GNU General Public License v3

EAPI=8
inherit cmake

DESCRIPTION="Ananicy rewritten in C++ for much lower CPU and memory usage
			(powered by CachyOS rules)"

HOMEPAGE="https://gitlab.com/ananicy-cpp/ananicy-cpp"
SRC_URI="https://gitlab.com/ananicy-cpp/ananicy-cpp/-/archive/v${PV}/${PN}-v${PV}.tar.bz2
		test? ( https://github.com/doctest/doctest/archive/refs/tags/v2.4.9.tar.gz -> doctest-v2.4.9.tar.gz )
		benchmark? ( https://github.com/google/benchmark/archive/refs/tags/v1.7.1.tar.gz -> benchmark-v1.7.1.tar.gz )
		!system-json? ( https://github.com/ArthurSonzogni/nlohmann_json_cmake_fetchcontent/archive/refs/tags/v3.11.2.tar.gz -> nlohmann_json-v3.11.2.tar.gz )
		!system-libfmt? ( https://github.com/fmtlib/fmt/archive/refs/tags/10.1.0.tar.gz -> libfmt-v10.1.0.tar.gz )
		!system-spdlog? ( https://github.com/gabime/spdlog/archive/refs/tags/v1.12.0.tar.gz -> spdlog-v1.12.0.tar.gz )
		"

S="${WORKDIR}/${PN}-v${PV}"

LICENSE="GPL-3"
SLOT="0"
KEYWORDS="~amd64"
IUSE="systemd +bpf test benchmark +system-json +system-libfmt +system-spdlog"
REQUIRED_USE="benchmark? ( test )"

RDEPEND="
	system-json? ( dev-cpp/nlohmann_json )
	system-libfmt? ( dev-libs/libfmt )
	system-spdlog? ( dev-libs/spdlog )
	systemd? ( sys-apps/systemd )
	bpf? ( dev-libs/libbpf
	dev-util/bpftool
	llvm-core/clang[llvm_targets_BPF] )
"
DEPEND="
	${RDEPEND}
	sys-auth/rtkit
"
PDEPEND="
	app-admin/ananicy-rules
"

src_unpack() {
	default
	# these magic number for dependencies are generated by CPM.cmake.
	# Actually there is a specific way to generate it. It's kind of combination
	# of some flags, url and version, which is too complex. Just follow the
	# error message or have a build locally to fill these magic numbers
	#
	# The warning about `git status` failed during cmake config is normal, as the tar.gz
	# file doesn't contain git messages.
	if [ $(usex test) == "yes" ]; then
		mkdir "${WORKDIR}/doctest"
		mv "${WORKDIR}/doctest-2.4.9" "${WORKDIR}/doctest/feb69ea9b2edec412b5ae0b433e8856567acd769"
	fi
	if [ $(usex benchmark) == "yes" ]; then
		mkdir "${WORKDIR}/benchmark"
		mv "${WORKDIR}/benchmark-1.7.1" "${WORKDIR}/benchmark/86188f575c4e1a23da81fde06c980d36a7bb61b0"
	fi
	if [ $(usex system-json) == "no" ]; then
		mkdir "${WORKDIR}/json"
		mv "${WORKDIR}/nlohmann_json_cmake_fetchcontent-3.11.2" "${WORKDIR}/json/1a60656ab91a3f3a89598a40c5b0cd76c5757cab"
	fi
	if [ $(usex system-libfmt) == "no" ]; then
		mkdir "${WORKDIR}/fmt"
		mv "${WORKDIR}/fmt-10.1.0" "${WORKDIR}/fmt/1760fe5667188b77c44fdbc4f6c70483e6dbe1d5"
	fi
	if [ $(usex system-spdlog) == "no" ]; then
		mkdir "${WORKDIR}/spdlog"
		mv "${WORKDIR}/spdlog-1.12.0" "${WORKDIR}/spdlog/59d30e27cf728fb9dd106b71357261efc99d1330"
	fi
}

src_configure() {
	local mycmakeargs=(
		# BUILD_SAHRED_LIBS option is used for bundled packages. If not, the output binary will
		# rely on the shared libs, which will not be installed (also should not be installed
		# because they may conflict with current system librarys) into system.
		-DBUILD_SHARED_LIBS=OFF
		-DENABLE_SYSTEMD=$(usex systemd)
		-DUSE_EXTERNAL_JSON=$(usex system-json)
		-DUSE_EXTERNAL_FMTLIB=$(usex system-libfmt)
		-DUSE_EXTERNAL_SPDLOG=$(usex system-spdlog)
		-DENABLE_ANANICY_TESTS=$(usex test)
		-DENABLE_ANANICY_BENCHMARKS=$(usex benchmark)
		-DUSE_BPF_PROC_IMPL=$(usex bpf)
		-DBPF_BUILD_LIBBPF=OFF
		-DCPM_SOURCE_CACHE=${WORKDIR}
	)
	CMAKE_BUILD_TYPE=Release
	cmake_src_configure
}

src_test() {
	BUILD_DIR="${WORKDIR}/${PN}-v${PV}_build"
	TEST_DIR="${BUILD_DIR}/src/tests"
	${TEST_DIR}/test-core
	${TEST_DIR}/test-utility
	BENCH_DIR="${BUILD_DIR}/benchmarks"
	usex benchmark && ${BENCH_DIR}/ananicy_cpp_benchmarks
}

src_install() {
	doinitd "${FILESDIR}/${PN}.initd"
	cmake_src_install
}
